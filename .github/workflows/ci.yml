name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      name: 'Check out source'
    - uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: '5.x'
      name: 'Setup GitVersion'
    - run: |
        $version = dotnet-gitversion /UpdateAssemblyInfo | ConvertFrom-Json
        Write-Output ("BUILD_NUMBER=" + $version.LegacySemVer) >> $Env:GITHUB_ENV
      name: 'Update Version'
      shell: pwsh
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.103
      name: 'Setup .NET Core 3.0'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
      name: 'Setup .NET Core 3.1'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
      name: 'Setup .NET 5.0'
    - run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
      name: Build
    - run: |
        set +e
        dotnet test Dogged.Tests/Dogged.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Dogged.Tests.trx"
        ret=$(($ret + $?))
        dotnet test Dogged.Native.Tests/Dogged.Native.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Dogged.Native.Tests.trx"
        ret=$(($ret + $?))
        exit $ret
      shell: bash
      name: Test
    - run: |
        mkdir ${{ github.workspace }}\package
        dotnet pack --no-build -c Release --output "${{ github.workspace }}\package" "-p:Version=${{ env.BUILD_NUMBER }}" "-p:PackageVersion=${{ env.BUILD_NUMBER }}"
      shell: pwsh
      name: Package
      if: matrix.os == 'windows-latest'
    - uses: actions/upload-artifact@v2
      with:
        name: Dogged-${{ env.BUILD_NUMBER }}.nupkg
        path: ${{ github.workspace }}/package/Dogged.${{ env.BUILD_NUMBER }}.nupkg
      if: matrix.os == 'windows-latest'
      name: 'Upload Dogged Package'
    - uses: actions/upload-artifact@v2
      with:
        name: Dogged.Native-${{ env.BUILD_NUMBER }}.nupkg
        path: ${{ github.workspace }}/package/Dogged.Native.${{ env.BUILD_NUMBER }}.nupkg
      if: matrix.os == 'windows-latest'
      name: 'Upload Dogged.Native Package'

  documentation:
    runs-on: windows-latest
    steps:
    - name: 'Check out source'
      uses: actions/checkout@v2

    # Check out the `docs` branch into the `Documentation/_site` directory
    - name: 'Check out documentation branch'
      uses: actions/checkout@v2
      with:
        ref: 'docs'
        path: 'Documentation/_site'

    - name: 'Install DocFX'
      run: choco install docfx

    - name: 'Generate documentation'
      run: docfx
      working-directory: Documentation

    - name: 'Upload documentation'
      uses: actions/upload-artifact@v1
      with:
        name: docs
        path: ${{ github.workspace }}/Documentation/_site

    # Check for changes; this avoids publishing a new change to the
    # dist branch when we made a change to (for example) a unit test.
    # If there were changes made in the publish step above, then this
    # will set the variable `has_changes` to `1` for subsequent steps.
    - name: Check for changes
      id: status
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "::set-output name=has_changes::1"
        fi
      shell: bash
      working-directory: Documentation/_site
      if: github.event_name == 'push'

    # Commit the changes to the dist branch and push the changes up to
    # GitHub.  (Replace the name and email address with your own.)
    # This step only runs if the previous step set `has_changes` to `1`.
    - name: Publish documentation
      run: |
        git add --verbose .
        git config user.name 'CI User'
        git config user.email 'noreply@dogged.app'
        git commit -m 'Update from CI'
        git push origin docs
      if: steps.status.outputs.has_changes == '1'
      working-directory: Documentation/_site
